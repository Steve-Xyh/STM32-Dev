ARM GAS  /var/folders/br/2wtqgb695v5djmfg7vx_4m7h0000gn/T//cc55g6pM.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"main.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.SwitchOn,"ax",%progbits
  20              		.align	2
  21              		.global	SwitchOn
  22              		.thumb
  23              		.thumb_func
  25              	SwitchOn:
  26              	.LFB64:
  27              		.file 1 "Src/main.c"
   1:Src/main.c    **** /* USER CODE BEGIN Header */
   2:Src/main.c    **** /**
   3:Src/main.c    ****   ******************************************************************************
   4:Src/main.c    ****   * @file           : main.c
   5:Src/main.c    ****   * @brief          : Main program body
   6:Src/main.c    ****   ******************************************************************************
   7:Src/main.c    ****   * @attention
   8:Src/main.c    ****   *
   9:Src/main.c    ****   * <h2><center>&copy; Copyright (c) 2019 STMicroelectronics.
  10:Src/main.c    ****   * All rights reserved.</center></h2>
  11:Src/main.c    ****   *
  12:Src/main.c    ****   * This software component is licensed by ST under BSD 3-Clause license,
  13:Src/main.c    ****   * the "License"; You may not use this file except in compliance with the
  14:Src/main.c    ****   * License. You may obtain a copy of the License at:
  15:Src/main.c    ****   *                        opensource.org/licenses/BSD-3-Clause
  16:Src/main.c    ****   *
  17:Src/main.c    ****   ******************************************************************************
  18:Src/main.c    ****   */
  19:Src/main.c    **** /* USER CODE END Header */
  20:Src/main.c    **** 
  21:Src/main.c    **** /* Includes ------------------------------------------------------------------*/
  22:Src/main.c    **** #include "main.h"
  23:Src/main.c    **** #include "usart.h"
  24:Src/main.c    **** #include "gpio.h"
  25:Src/main.c    **** 
  26:Src/main.c    **** /* Private includes ----------------------------------------------------------*/
  27:Src/main.c    **** /* USER CODE BEGIN Includes */
  28:Src/main.c    **** 
  29:Src/main.c    **** /* USER CODE END Includes */
  30:Src/main.c    **** 
  31:Src/main.c    **** /* Private typedef -----------------------------------------------------------*/
ARM GAS  /var/folders/br/2wtqgb695v5djmfg7vx_4m7h0000gn/T//cc55g6pM.s 			page 2


  32:Src/main.c    **** /* USER CODE BEGIN PTD */
  33:Src/main.c    **** 
  34:Src/main.c    **** /* USER CODE END PTD */
  35:Src/main.c    **** 
  36:Src/main.c    **** /* Private define ------------------------------------------------------------*/
  37:Src/main.c    **** /* USER CODE BEGIN PD */
  38:Src/main.c    **** uint8_t rData[6];
  39:Src/main.c    **** uint8_t tData[] = "#0002:0000#\n\r";
  40:Src/main.c    **** uint8_t cmdOn[] = "OOOOOO\n\r";
  41:Src/main.c    **** uint8_t cmdOff[] = "XXXXXX\n\r";
  42:Src/main.c    **** uint8_t endline[] = "\n\r";
  43:Src/main.c    **** uint8_t a = 0;
  44:Src/main.c    **** uint8_t a_str[10];
  45:Src/main.c    **** int loaded = 0;
  46:Src/main.c    **** 
  47:Src/main.c    **** /* USER CODE END PD */
  48:Src/main.c    **** 
  49:Src/main.c    **** /* Private macro -------------------------------------------------------------*/
  50:Src/main.c    **** /* USER CODE BEGIN PM */
  51:Src/main.c    **** 
  52:Src/main.c    **** /* USER CODE END PM */
  53:Src/main.c    **** 
  54:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  55:Src/main.c    **** 
  56:Src/main.c    **** /* USER CODE BEGIN PV */
  57:Src/main.c    **** 
  58:Src/main.c    **** /* USER CODE END PV */
  59:Src/main.c    **** 
  60:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
  61:Src/main.c    **** void SystemClock_Config(void);
  62:Src/main.c    **** /* USER CODE BEGIN PFP */
  63:Src/main.c    **** 
  64:Src/main.c    **** /* USER CODE END PFP */
  65:Src/main.c    **** 
  66:Src/main.c    **** /* Private user code ---------------------------------------------------------*/
  67:Src/main.c    **** /* USER CODE BEGIN 0 */
  68:Src/main.c    **** 
  69:Src/main.c    **** void SwitchOn(GPIO_TypeDef* LedPort, uint16_t LedPin)
  70:Src/main.c    **** {
  28              		.loc 1 70 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              	.LVL0:
  33 0000 08B5     		push	{r3, lr}
  34              	.LCFI0:
  35              		.cfi_def_cfa_offset 8
  36              		.cfi_offset 3, -8
  37              		.cfi_offset 14, -4
  71:Src/main.c    ****   HAL_GPIO_WritePin(LedPort,LedPin,1);
  38              		.loc 1 71 0
  39 0002 0122     		movs	r2, #1
  40 0004 FFF7FEFF 		bl	HAL_GPIO_WritePin
  41              	.LVL1:
  42 0008 08BD     		pop	{r3, pc}
  43              		.cfi_endproc
  44              	.LFE64:
ARM GAS  /var/folders/br/2wtqgb695v5djmfg7vx_4m7h0000gn/T//cc55g6pM.s 			page 3


  46 000a 00BF     		.section	.text.SwitchOff,"ax",%progbits
  47              		.align	2
  48              		.global	SwitchOff
  49              		.thumb
  50              		.thumb_func
  52              	SwitchOff:
  53              	.LFB65:
  72:Src/main.c    **** }
  73:Src/main.c    **** 
  74:Src/main.c    **** void SwitchOff(GPIO_TypeDef* LedPort, uint16_t LedPin)
  75:Src/main.c    **** {
  54              		.loc 1 75 0
  55              		.cfi_startproc
  56              		@ args = 0, pretend = 0, frame = 0
  57              		@ frame_needed = 0, uses_anonymous_args = 0
  58              	.LVL2:
  59 0000 08B5     		push	{r3, lr}
  60              	.LCFI1:
  61              		.cfi_def_cfa_offset 8
  62              		.cfi_offset 3, -8
  63              		.cfi_offset 14, -4
  76:Src/main.c    ****   HAL_GPIO_WritePin(LedPort,LedPin,0);
  64              		.loc 1 76 0
  65 0002 0022     		movs	r2, #0
  66 0004 FFF7FEFF 		bl	HAL_GPIO_WritePin
  67              	.LVL3:
  68 0008 08BD     		pop	{r3, pc}
  69              		.cfi_endproc
  70              	.LFE65:
  72 000a 00BF     		.section	.text.PowerOn,"ax",%progbits
  73              		.align	2
  74              		.global	PowerOn
  75              		.thumb
  76              		.thumb_func
  78              	PowerOn:
  79              	.LFB66:
  77:Src/main.c    **** }
  78:Src/main.c    **** 
  79:Src/main.c    **** void PowerOn()
  80:Src/main.c    **** {
  80              		.loc 1 80 0
  81              		.cfi_startproc
  82              		@ args = 0, pretend = 0, frame = 0
  83              		@ frame_needed = 0, uses_anonymous_args = 0
  84 0000 08B5     		push	{r3, lr}
  85              	.LCFI2:
  86              		.cfi_def_cfa_offset 8
  87              		.cfi_offset 3, -8
  88              		.cfi_offset 14, -4
  81:Src/main.c    ****   SwitchOn(LED1_GPIO_Port, LED1_Pin);
  89              		.loc 1 81 0
  90 0002 0121     		movs	r1, #1
  91 0004 0148     		ldr	r0, .L7
  92 0006 FFF7FEFF 		bl	SwitchOn
  93              	.LVL4:
  94 000a 08BD     		pop	{r3, pc}
  95              	.L8:
ARM GAS  /var/folders/br/2wtqgb695v5djmfg7vx_4m7h0000gn/T//cc55g6pM.s 			page 4


  96              		.align	2
  97              	.L7:
  98 000c 000C0140 		.word	1073810432
  99              		.cfi_endproc
 100              	.LFE66:
 102              		.section	.text.PowerOff,"ax",%progbits
 103              		.align	2
 104              		.global	PowerOff
 105              		.thumb
 106              		.thumb_func
 108              	PowerOff:
 109              	.LFB67:
  82:Src/main.c    **** }
  83:Src/main.c    **** 
  84:Src/main.c    **** void PowerOff()
  85:Src/main.c    **** {
 110              		.loc 1 85 0
 111              		.cfi_startproc
 112              		@ args = 0, pretend = 0, frame = 0
 113              		@ frame_needed = 0, uses_anonymous_args = 0
 114 0000 08B5     		push	{r3, lr}
 115              	.LCFI3:
 116              		.cfi_def_cfa_offset 8
 117              		.cfi_offset 3, -8
 118              		.cfi_offset 14, -4
  86:Src/main.c    ****   SwitchOff(LED1_GPIO_Port, LED1_Pin);
 119              		.loc 1 86 0
 120 0002 0121     		movs	r1, #1
 121 0004 0148     		ldr	r0, .L11
 122 0006 FFF7FEFF 		bl	SwitchOff
 123              	.LVL5:
 124 000a 08BD     		pop	{r3, pc}
 125              	.L12:
 126              		.align	2
 127              	.L11:
 128 000c 000C0140 		.word	1073810432
 129              		.cfi_endproc
 130              	.LFE67:
 132              		.section	.text.sendData,"ax",%progbits
 133              		.align	2
 134              		.global	sendData
 135              		.thumb
 136              		.thumb_func
 138              	sendData:
 139              	.LFB68:
  87:Src/main.c    **** }
  88:Src/main.c    **** 
  89:Src/main.c    **** void sendData(uint8_t* message)
  90:Src/main.c    **** {
 140              		.loc 1 90 0
 141              		.cfi_startproc
 142              		@ args = 0, pretend = 0, frame = 0
 143              		@ frame_needed = 0, uses_anonymous_args = 0
 144              	.LVL6:
 145 0000 08B5     		push	{r3, lr}
 146              	.LCFI4:
 147              		.cfi_def_cfa_offset 8
ARM GAS  /var/folders/br/2wtqgb695v5djmfg7vx_4m7h0000gn/T//cc55g6pM.s 			page 5


 148              		.cfi_offset 3, -8
 149              		.cfi_offset 14, -4
  91:Src/main.c    ****   HAL_UART_Transmit(&huart1, message, sizeof(message), 1000);
 150              		.loc 1 91 0
 151 0002 4FF47A73 		mov	r3, #1000
 152 0006 0422     		movs	r2, #4
 153 0008 0146     		mov	r1, r0
 154 000a 0448     		ldr	r0, .L16
 155              	.LVL7:
 156 000c FFF7FEFF 		bl	HAL_UART_Transmit
 157              	.LVL8:
 158              	.L14:
  92:Src/main.c    ****   while(HAL_UART_GetState(&huart1) == HAL_UART_STATE_BUSY_TX);
 159              		.loc 1 92 0 discriminator 1
 160 0010 0248     		ldr	r0, .L16
 161 0012 FFF7FEFF 		bl	HAL_UART_GetState
 162              	.LVL9:
 163 0016 2128     		cmp	r0, #33
 164 0018 FAD0     		beq	.L14
  93:Src/main.c    **** }
 165              		.loc 1 93 0
 166 001a 08BD     		pop	{r3, pc}
 167              	.L17:
 168              		.align	2
 169              	.L16:
 170 001c 00000000 		.word	huart1
 171              		.cfi_endproc
 172              	.LFE68:
 174              		.section	.text.DetectorCMD,"ax",%progbits
 175              		.align	2
 176              		.global	DetectorCMD
 177              		.thumb
 178              		.thumb_func
 180              	DetectorCMD:
 181              	.LFB69:
  94:Src/main.c    **** 
  95:Src/main.c    **** int DetectorCMD(GPIO_TypeDef* KeyPort, uint16_t KeyPin)
  96:Src/main.c    **** {
 182              		.loc 1 96 0
 183              		.cfi_startproc
 184              		@ args = 0, pretend = 0, frame = 0
 185              		@ frame_needed = 0, uses_anonymous_args = 0
 186              	.LVL10:
 187 0000 08B5     		push	{r3, lr}
 188              	.LCFI5:
 189              		.cfi_def_cfa_offset 8
 190              		.cfi_offset 3, -8
 191              		.cfi_offset 14, -4
  97:Src/main.c    ****   if(HAL_GPIO_ReadPin(KeyPort,KeyPin)){
 192              		.loc 1 97 0
 193 0002 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 194              	.LVL11:
 195 0006 08B1     		cbz	r0, .L20
  98:Src/main.c    ****     return 1;
 196              		.loc 1 98 0
 197 0008 0120     		movs	r0, #1
 198 000a 08BD     		pop	{r3, pc}
ARM GAS  /var/folders/br/2wtqgb695v5djmfg7vx_4m7h0000gn/T//cc55g6pM.s 			page 6


 199              	.L20:
  99:Src/main.c    ****   }
 100:Src/main.c    ****   else return 0;
 200              		.loc 1 100 0
 201 000c 0020     		movs	r0, #0
 101:Src/main.c    **** }
 202              		.loc 1 101 0
 203 000e 08BD     		pop	{r3, pc}
 204              		.cfi_endproc
 205              	.LFE69:
 207              		.section	.text.SystemClock_Config,"ax",%progbits
 208              		.align	2
 209              		.global	SystemClock_Config
 210              		.thumb
 211              		.thumb_func
 213              	SystemClock_Config:
 214              	.LFB71:
 102:Src/main.c    **** 
 103:Src/main.c    **** /* USER CODE END 0 */
 104:Src/main.c    **** 
 105:Src/main.c    **** /**
 106:Src/main.c    ****   * @brief  The application entry point.
 107:Src/main.c    ****   * @retval int
 108:Src/main.c    ****   */
 109:Src/main.c    **** int main(void)
 110:Src/main.c    **** {
 111:Src/main.c    ****   /* USER CODE BEGIN 1 */
 112:Src/main.c    **** 
 113:Src/main.c    ****   /* USER CODE END 1 */
 114:Src/main.c    **** 
 115:Src/main.c    ****   /* MCU Configuration--------------------------------------------------------*/
 116:Src/main.c    **** 
 117:Src/main.c    ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 118:Src/main.c    ****   HAL_Init();
 119:Src/main.c    **** 
 120:Src/main.c    ****   /* USER CODE BEGIN Init */
 121:Src/main.c    **** 
 122:Src/main.c    ****   /* USER CODE END Init */
 123:Src/main.c    **** 
 124:Src/main.c    ****   /* Configure the system clock */
 125:Src/main.c    ****   SystemClock_Config();
 126:Src/main.c    **** 
 127:Src/main.c    ****   /* USER CODE BEGIN SysInit */
 128:Src/main.c    **** 
 129:Src/main.c    ****   /* USER CODE END SysInit */
 130:Src/main.c    **** 
 131:Src/main.c    ****   /* Initialize all configured peripherals */
 132:Src/main.c    ****   MX_GPIO_Init();
 133:Src/main.c    ****   MX_USART1_UART_Init();
 134:Src/main.c    ****   /* USER CODE BEGIN 2 */
 135:Src/main.c    **** 
 136:Src/main.c    ****   /* USER CODE END 2 */
 137:Src/main.c    **** 
 138:Src/main.c    ****   /* Infinite loop */
 139:Src/main.c    ****   /* USER CODE BEGIN WHILE */
 140:Src/main.c    ****   while (1)
 141:Src/main.c    ****   {
ARM GAS  /var/folders/br/2wtqgb695v5djmfg7vx_4m7h0000gn/T//cc55g6pM.s 			page 7


 142:Src/main.c    ****     /* USER CODE END WHILE */
 143:Src/main.c    **** 
 144:Src/main.c    ****     /* USER CODE BEGIN 3 */
 145:Src/main.c    ****     while(!loaded){
 146:Src/main.c    ****       //发送地址
 147:Src/main.c    ****       HAL_UART_Transmit(&huart1, tData, sizeof(tData), 1000);
 148:Src/main.c    ****       while(HAL_UART_GetState(&huart1) == HAL_UART_STATE_BUSY_TX);
 149:Src/main.c    **** 
 150:Src/main.c    ****       //检测总控是否识别
 151:Src/main.c    ****       HAL_UART_Receive(&huart1, rData, sizeof(rData), 1000);
 152:Src/main.c    ****       while(HAL_UART_GetState(&huart1) == HAL_UART_STATE_BUSY_RX);
 153:Src/main.c    ****       if(rData[1] == 'R'){
 154:Src/main.c    ****         loaded = 1;
 155:Src/main.c    ****         PowerOff();
 156:Src/main.c    ****         break;
 157:Src/main.c    ****       }
 158:Src/main.c    ****     }
 159:Src/main.c    **** 
 160:Src/main.c    ****     //发送指令
 161:Src/main.c    ****     if(DetectorCMD(KEY1_GPIO_Port, KEY1_Pin)){
 162:Src/main.c    ****       for(int i = 10; i>=0; i--){
 163:Src/main.c    ****         HAL_UART_Transmit(&huart1, cmdOn, sizeof(cmdOn), 1000);
 164:Src/main.c    ****         while(HAL_UART_GetState(&huart1) == HAL_UART_STATE_BUSY_TX);
 165:Src/main.c    ****         SwitchOn(LED1_GPIO_Port, LED1_Pin);
 166:Src/main.c    ****       }
 167:Src/main.c    ****     }
 168:Src/main.c    ****     else{
 169:Src/main.c    **** 
 170:Src/main.c    ****       HAL_UART_Transmit(&huart1, cmdOff, sizeof(cmdOff), 1000);
 171:Src/main.c    ****       while(HAL_UART_GetState(&huart1) == HAL_UART_STATE_BUSY_TX);
 172:Src/main.c    **** 
 173:Src/main.c    ****       SwitchOff(LED1_GPIO_Port, LED1_Pin);
 174:Src/main.c    ****     }
 175:Src/main.c    ****     HAL_Delay(1000);
 176:Src/main.c    ****   }
 177:Src/main.c    ****   /* USER CODE END 3 */
 178:Src/main.c    **** }
 179:Src/main.c    **** 
 180:Src/main.c    **** /**
 181:Src/main.c    ****   * @brief System Clock Configuration
 182:Src/main.c    ****   * @retval None
 183:Src/main.c    ****   */
 184:Src/main.c    **** void SystemClock_Config(void)
 185:Src/main.c    **** {
 215              		.loc 1 185 0
 216              		.cfi_startproc
 217              		@ args = 0, pretend = 0, frame = 64
 218              		@ frame_needed = 0, uses_anonymous_args = 0
 219 0000 10B5     		push	{r4, lr}
 220              	.LCFI6:
 221              		.cfi_def_cfa_offset 8
 222              		.cfi_offset 4, -8
 223              		.cfi_offset 14, -4
 224 0002 90B0     		sub	sp, sp, #64
 225              	.LCFI7:
 226              		.cfi_def_cfa_offset 72
 186:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
ARM GAS  /var/folders/br/2wtqgb695v5djmfg7vx_4m7h0000gn/T//cc55g6pM.s 			page 8


 227              		.loc 1 186 0
 228 0004 2822     		movs	r2, #40
 229 0006 0021     		movs	r1, #0
 230 0008 06A8     		add	r0, sp, #24
 231 000a FFF7FEFF 		bl	memset
 232              	.LVL12:
 187:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 233              		.loc 1 187 0
 234 000e 0024     		movs	r4, #0
 235 0010 0194     		str	r4, [sp, #4]
 236 0012 0294     		str	r4, [sp, #8]
 237 0014 0394     		str	r4, [sp, #12]
 238 0016 0494     		str	r4, [sp, #16]
 239 0018 0594     		str	r4, [sp, #20]
 188:Src/main.c    **** 
 189:Src/main.c    ****   /** Initializes the CPU, AHB and APB busses clocks 
 190:Src/main.c    ****   */
 191:Src/main.c    ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 240              		.loc 1 191 0
 241 001a 0223     		movs	r3, #2
 242 001c 0693     		str	r3, [sp, #24]
 192:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 243              		.loc 1 192 0
 244 001e 0123     		movs	r3, #1
 245 0020 0A93     		str	r3, [sp, #40]
 193:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 246              		.loc 1 193 0
 247 0022 1023     		movs	r3, #16
 248 0024 0B93     		str	r3, [sp, #44]
 194:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 195:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 249              		.loc 1 195 0
 250 0026 06A8     		add	r0, sp, #24
 251 0028 FFF7FEFF 		bl	HAL_RCC_OscConfig
 252              	.LVL13:
 196:Src/main.c    ****   {
 197:Src/main.c    ****     Error_Handler();
 198:Src/main.c    ****   }
 199:Src/main.c    ****   /** Initializes the CPU, AHB and APB busses clocks 
 200:Src/main.c    ****   */
 201:Src/main.c    ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 253              		.loc 1 201 0
 254 002c 0F23     		movs	r3, #15
 255 002e 0193     		str	r3, [sp, #4]
 202:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 203:Src/main.c    ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 256              		.loc 1 203 0
 257 0030 0294     		str	r4, [sp, #8]
 204:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 258              		.loc 1 204 0
 259 0032 0394     		str	r4, [sp, #12]
 205:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 260              		.loc 1 205 0
 261 0034 0494     		str	r4, [sp, #16]
 206:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 262              		.loc 1 206 0
 263 0036 0594     		str	r4, [sp, #20]
ARM GAS  /var/folders/br/2wtqgb695v5djmfg7vx_4m7h0000gn/T//cc55g6pM.s 			page 9


 207:Src/main.c    **** 
 208:Src/main.c    ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 264              		.loc 1 208 0
 265 0038 2146     		mov	r1, r4
 266 003a 01A8     		add	r0, sp, #4
 267 003c FFF7FEFF 		bl	HAL_RCC_ClockConfig
 268              	.LVL14:
 209:Src/main.c    ****   {
 210:Src/main.c    ****     Error_Handler();
 211:Src/main.c    ****   }
 212:Src/main.c    **** }
 269              		.loc 1 212 0
 270 0040 10B0     		add	sp, sp, #64
 271              	.LCFI8:
 272              		.cfi_def_cfa_offset 8
 273              		@ sp needed
 274 0042 10BD     		pop	{r4, pc}
 275              		.cfi_endproc
 276              	.LFE71:
 278              		.section	.text.main,"ax",%progbits
 279              		.align	2
 280              		.global	main
 281              		.thumb
 282              		.thumb_func
 284              	main:
 285              	.LFB70:
 110:Src/main.c    ****   /* USER CODE BEGIN 1 */
 286              		.loc 1 110 0
 287              		.cfi_startproc
 288              		@ args = 0, pretend = 0, frame = 0
 289              		@ frame_needed = 0, uses_anonymous_args = 0
 290 0000 10B5     		push	{r4, lr}
 291              	.LCFI9:
 292              		.cfi_def_cfa_offset 8
 293              		.cfi_offset 4, -8
 294              		.cfi_offset 14, -4
 118:Src/main.c    **** 
 295              		.loc 1 118 0
 296 0002 FFF7FEFF 		bl	HAL_Init
 297              	.LVL15:
 125:Src/main.c    **** 
 298              		.loc 1 125 0
 299 0006 FFF7FEFF 		bl	SystemClock_Config
 300              	.LVL16:
 132:Src/main.c    ****   MX_USART1_UART_Init();
 301              		.loc 1 132 0
 302 000a FFF7FEFF 		bl	MX_GPIO_Init
 303              	.LVL17:
 133:Src/main.c    ****   /* USER CODE BEGIN 2 */
 304              		.loc 1 133 0
 305 000e FFF7FEFF 		bl	MX_USART1_UART_Init
 306              	.LVL18:
 307 0012 21E0     		b	.L25
 308              	.L30:
 147:Src/main.c    ****       while(HAL_UART_GetState(&huart1) == HAL_UART_STATE_BUSY_TX);
 309              		.loc 1 147 0
 310 0014 4FF47A73 		mov	r3, #1000
ARM GAS  /var/folders/br/2wtqgb695v5djmfg7vx_4m7h0000gn/T//cc55g6pM.s 			page 10


 311 0018 0E22     		movs	r2, #14
 312 001a 2A49     		ldr	r1, .L40
 313 001c 2A48     		ldr	r0, .L40+4
 314 001e FFF7FEFF 		bl	HAL_UART_Transmit
 315              	.LVL19:
 316              	.L26:
 148:Src/main.c    **** 
 317              		.loc 1 148 0 discriminator 1
 318 0022 2948     		ldr	r0, .L40+4
 319 0024 FFF7FEFF 		bl	HAL_UART_GetState
 320              	.LVL20:
 321 0028 2128     		cmp	r0, #33
 322 002a FAD0     		beq	.L26
 151:Src/main.c    ****       while(HAL_UART_GetState(&huart1) == HAL_UART_STATE_BUSY_RX);
 323              		.loc 1 151 0
 324 002c 4FF47A73 		mov	r3, #1000
 325 0030 0622     		movs	r2, #6
 326 0032 2649     		ldr	r1, .L40+8
 327 0034 2448     		ldr	r0, .L40+4
 328 0036 FFF7FEFF 		bl	HAL_UART_Receive
 329              	.LVL21:
 330              	.L27:
 152:Src/main.c    ****       if(rData[1] == 'R'){
 331              		.loc 1 152 0 discriminator 1
 332 003a 2348     		ldr	r0, .L40+4
 333 003c FFF7FEFF 		bl	HAL_UART_GetState
 334              	.LVL22:
 335 0040 2228     		cmp	r0, #34
 336 0042 FAD0     		beq	.L27
 153:Src/main.c    ****         loaded = 1;
 337              		.loc 1 153 0
 338 0044 214B     		ldr	r3, .L40+8
 339 0046 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 340 0048 522B     		cmp	r3, #82
 341 004a 05D1     		bne	.L25
 154:Src/main.c    ****         PowerOff();
 342              		.loc 1 154 0
 343 004c 0122     		movs	r2, #1
 344 004e 204B     		ldr	r3, .L40+12
 345 0050 1A60     		str	r2, [r3]
 155:Src/main.c    ****         break;
 346              		.loc 1 155 0
 347 0052 FFF7FEFF 		bl	PowerOff
 348              	.LVL23:
 156:Src/main.c    ****       }
 349              		.loc 1 156 0
 350 0056 03E0     		b	.L29
 351              	.L25:
 145:Src/main.c    ****       //发送地址
 352              		.loc 1 145 0
 353 0058 1D4B     		ldr	r3, .L40+12
 354 005a 1B68     		ldr	r3, [r3]
 355 005c 002B     		cmp	r3, #0
 356 005e D9D0     		beq	.L30
 357              	.L29:
 161:Src/main.c    ****       for(int i = 10; i>=0; i--){
 358              		.loc 1 161 0
ARM GAS  /var/folders/br/2wtqgb695v5djmfg7vx_4m7h0000gn/T//cc55g6pM.s 			page 11


 359 0060 0121     		movs	r1, #1
 360 0062 1C48     		ldr	r0, .L40+16
 361 0064 FFF7FEFF 		bl	DetectorCMD
 362              	.LVL24:
 363 0068 90B9     		cbnz	r0, .L37
 364 006a 15E0     		b	.L38
 365              	.LVL25:
 366              	.L34:
 367              	.LBB2:
 163:Src/main.c    ****         while(HAL_UART_GetState(&huart1) == HAL_UART_STATE_BUSY_TX);
 368              		.loc 1 163 0
 369 006c 4FF47A73 		mov	r3, #1000
 370 0070 0922     		movs	r2, #9
 371 0072 1949     		ldr	r1, .L40+20
 372 0074 1448     		ldr	r0, .L40+4
 373 0076 FFF7FEFF 		bl	HAL_UART_Transmit
 374              	.LVL26:
 375              	.L33:
 164:Src/main.c    ****         SwitchOn(LED1_GPIO_Port, LED1_Pin);
 376              		.loc 1 164 0 discriminator 1
 377 007a 1348     		ldr	r0, .L40+4
 378 007c FFF7FEFF 		bl	HAL_UART_GetState
 379              	.LVL27:
 380 0080 2128     		cmp	r0, #33
 381 0082 FAD0     		beq	.L33
 165:Src/main.c    ****       }
 382              		.loc 1 165 0 discriminator 2
 383 0084 0121     		movs	r1, #1
 384 0086 1548     		ldr	r0, .L40+24
 385 0088 FFF7FEFF 		bl	SwitchOn
 386              	.LVL28:
 162:Src/main.c    ****         HAL_UART_Transmit(&huart1, cmdOn, sizeof(cmdOn), 1000);
 387              		.loc 1 162 0 discriminator 2
 388 008c 013C     		subs	r4, r4, #1
 389              	.LVL29:
 390 008e 00E0     		b	.L31
 391              	.LVL30:
 392              	.L37:
 393              	.LBE2:
 394 0090 0A24     		movs	r4, #10
 395              	.L31:
 396              	.LVL31:
 397              	.LBB3:
 162:Src/main.c    ****         HAL_UART_Transmit(&huart1, cmdOn, sizeof(cmdOn), 1000);
 398              		.loc 1 162 0 is_stmt 0 discriminator 1
 399 0092 002C     		cmp	r4, #0
 400 0094 EADA     		bge	.L34
 401 0096 0FE0     		b	.L35
 402              	.LVL32:
 403              	.L38:
 404              	.LBE3:
 170:Src/main.c    ****       while(HAL_UART_GetState(&huart1) == HAL_UART_STATE_BUSY_TX);
 405              		.loc 1 170 0 is_stmt 1
 406 0098 4FF47A73 		mov	r3, #1000
 407 009c 0922     		movs	r2, #9
 408 009e 1049     		ldr	r1, .L40+28
 409 00a0 0948     		ldr	r0, .L40+4
ARM GAS  /var/folders/br/2wtqgb695v5djmfg7vx_4m7h0000gn/T//cc55g6pM.s 			page 12


 410 00a2 FFF7FEFF 		bl	HAL_UART_Transmit
 411              	.LVL33:
 412              	.L36:
 171:Src/main.c    **** 
 413              		.loc 1 171 0 discriminator 1
 414 00a6 0848     		ldr	r0, .L40+4
 415 00a8 FFF7FEFF 		bl	HAL_UART_GetState
 416              	.LVL34:
 417 00ac 2128     		cmp	r0, #33
 418 00ae FAD0     		beq	.L36
 173:Src/main.c    ****     }
 419              		.loc 1 173 0
 420 00b0 0121     		movs	r1, #1
 421 00b2 0A48     		ldr	r0, .L40+24
 422 00b4 FFF7FEFF 		bl	SwitchOff
 423              	.LVL35:
 424              	.L35:
 175:Src/main.c    ****   }
 425              		.loc 1 175 0
 426 00b8 4FF47A70 		mov	r0, #1000
 427 00bc FFF7FEFF 		bl	HAL_Delay
 428              	.LVL36:
 176:Src/main.c    ****   /* USER CODE END 3 */
 429              		.loc 1 176 0
 430 00c0 CAE7     		b	.L25
 431              	.L41:
 432 00c2 00BF     		.align	2
 433              	.L40:
 434 00c4 00000000 		.word	.LANCHOR0
 435 00c8 00000000 		.word	huart1
 436 00cc 00000000 		.word	rData
 437 00d0 00000000 		.word	.LANCHOR1
 438 00d4 00080140 		.word	1073809408
 439 00d8 00000000 		.word	.LANCHOR2
 440 00dc 000C0140 		.word	1073810432
 441 00e0 00000000 		.word	.LANCHOR3
 442              		.cfi_endproc
 443              	.LFE70:
 445              		.section	.text.Error_Handler,"ax",%progbits
 446              		.align	2
 447              		.global	Error_Handler
 448              		.thumb
 449              		.thumb_func
 451              	Error_Handler:
 452              	.LFB72:
 213:Src/main.c    **** 
 214:Src/main.c    **** /* USER CODE BEGIN 4 */
 215:Src/main.c    **** 
 216:Src/main.c    **** /* USER CODE END 4 */
 217:Src/main.c    **** 
 218:Src/main.c    **** /**
 219:Src/main.c    ****   * @brief  This function is executed in case of error occurrence.
 220:Src/main.c    ****   * @retval None
 221:Src/main.c    ****   */
 222:Src/main.c    **** void Error_Handler(void)
 223:Src/main.c    **** {
 453              		.loc 1 223 0
ARM GAS  /var/folders/br/2wtqgb695v5djmfg7vx_4m7h0000gn/T//cc55g6pM.s 			page 13


 454              		.cfi_startproc
 455              		@ args = 0, pretend = 0, frame = 0
 456              		@ frame_needed = 0, uses_anonymous_args = 0
 457              		@ link register save eliminated.
 458 0000 7047     		bx	lr
 459              		.cfi_endproc
 460              	.LFE72:
 462              		.global	loaded
 463              		.comm	a_str,10,4
 464              		.global	a
 465              		.global	endline
 466              		.global	cmdOff
 467              		.global	cmdOn
 468              		.global	tData
 469              		.comm	rData,6,4
 470 0002 00BF     		.section	.data.cmdOn,"aw",%progbits
 471              		.align	2
 472              		.set	.LANCHOR2,. + 0
 475              	cmdOn:
 476 0000 4F4F4F4F 		.ascii	"OOOOOO\012\015\000"
 476      4F4F0A0D 
 476      00
 477              		.section	.data.cmdOff,"aw",%progbits
 478              		.align	2
 479              		.set	.LANCHOR3,. + 0
 482              	cmdOff:
 483 0000 58585858 		.ascii	"XXXXXX\012\015\000"
 483      58580A0D 
 483      00
 484              		.section	.data.endline,"aw",%progbits
 485              		.align	2
 488              	endline:
 489 0000 0A0D00   		.ascii	"\012\015\000"
 490              		.section	.data.tData,"aw",%progbits
 491              		.align	2
 492              		.set	.LANCHOR0,. + 0
 495              	tData:
 496 0000 23303030 		.ascii	"#0002:0000#\012\015\000"
 496      323A3030 
 496      3030230A 
 496      0D00
 497              		.section	.bss.a,"aw",%nobits
 500              	a:
 501 0000 00       		.space	1
 502              		.section	.bss.loaded,"aw",%nobits
 503              		.align	2
 504              		.set	.LANCHOR1,. + 0
 507              	loaded:
 508 0000 00000000 		.space	4
 509              		.text
 510              	.Letext0:
 511              		.file 2 "/Users/apple/gcc-arm-none-eabi/arm-none-eabi/include/machine/_default_types.h"
 512              		.file 3 "/Users/apple/gcc-arm-none-eabi/arm-none-eabi/include/sys/_stdint.h"
 513              		.file 4 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f103xb.h"
 514              		.file 5 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_def.h"
 515              		.file 6 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_rcc.h"
 516              		.file 7 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_rcc_ex.h"
ARM GAS  /var/folders/br/2wtqgb695v5djmfg7vx_4m7h0000gn/T//cc55g6pM.s 			page 14


 517              		.file 8 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_dma.h"
 518              		.file 9 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_uart.h"
 519              		.file 10 "Drivers/CMSIS/Include/core_cm3.h"
 520              		.file 11 "Inc/usart.h"
 521              		.file 12 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_gpio.h"
 522              		.file 13 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal.h"
 523              		.file 14 "Inc/gpio.h"
ARM GAS  /var/folders/br/2wtqgb695v5djmfg7vx_4m7h0000gn/T//cc55g6pM.s 			page 15


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
/var/folders/br/2wtqgb695v5djmfg7vx_4m7h0000gn/T//cc55g6pM.s:20     .text.SwitchOn:0000000000000000 $t
/var/folders/br/2wtqgb695v5djmfg7vx_4m7h0000gn/T//cc55g6pM.s:25     .text.SwitchOn:0000000000000000 SwitchOn
/var/folders/br/2wtqgb695v5djmfg7vx_4m7h0000gn/T//cc55g6pM.s:47     .text.SwitchOff:0000000000000000 $t
/var/folders/br/2wtqgb695v5djmfg7vx_4m7h0000gn/T//cc55g6pM.s:52     .text.SwitchOff:0000000000000000 SwitchOff
/var/folders/br/2wtqgb695v5djmfg7vx_4m7h0000gn/T//cc55g6pM.s:73     .text.PowerOn:0000000000000000 $t
/var/folders/br/2wtqgb695v5djmfg7vx_4m7h0000gn/T//cc55g6pM.s:78     .text.PowerOn:0000000000000000 PowerOn
/var/folders/br/2wtqgb695v5djmfg7vx_4m7h0000gn/T//cc55g6pM.s:98     .text.PowerOn:000000000000000c $d
/var/folders/br/2wtqgb695v5djmfg7vx_4m7h0000gn/T//cc55g6pM.s:103    .text.PowerOff:0000000000000000 $t
/var/folders/br/2wtqgb695v5djmfg7vx_4m7h0000gn/T//cc55g6pM.s:108    .text.PowerOff:0000000000000000 PowerOff
/var/folders/br/2wtqgb695v5djmfg7vx_4m7h0000gn/T//cc55g6pM.s:128    .text.PowerOff:000000000000000c $d
/var/folders/br/2wtqgb695v5djmfg7vx_4m7h0000gn/T//cc55g6pM.s:133    .text.sendData:0000000000000000 $t
/var/folders/br/2wtqgb695v5djmfg7vx_4m7h0000gn/T//cc55g6pM.s:138    .text.sendData:0000000000000000 sendData
/var/folders/br/2wtqgb695v5djmfg7vx_4m7h0000gn/T//cc55g6pM.s:170    .text.sendData:000000000000001c $d
/var/folders/br/2wtqgb695v5djmfg7vx_4m7h0000gn/T//cc55g6pM.s:175    .text.DetectorCMD:0000000000000000 $t
/var/folders/br/2wtqgb695v5djmfg7vx_4m7h0000gn/T//cc55g6pM.s:180    .text.DetectorCMD:0000000000000000 DetectorCMD
/var/folders/br/2wtqgb695v5djmfg7vx_4m7h0000gn/T//cc55g6pM.s:208    .text.SystemClock_Config:0000000000000000 $t
/var/folders/br/2wtqgb695v5djmfg7vx_4m7h0000gn/T//cc55g6pM.s:213    .text.SystemClock_Config:0000000000000000 SystemClock_Config
/var/folders/br/2wtqgb695v5djmfg7vx_4m7h0000gn/T//cc55g6pM.s:279    .text.main:0000000000000000 $t
/var/folders/br/2wtqgb695v5djmfg7vx_4m7h0000gn/T//cc55g6pM.s:284    .text.main:0000000000000000 main
/var/folders/br/2wtqgb695v5djmfg7vx_4m7h0000gn/T//cc55g6pM.s:434    .text.main:00000000000000c4 $d
                            *COM*:0000000000000006 rData
/var/folders/br/2wtqgb695v5djmfg7vx_4m7h0000gn/T//cc55g6pM.s:446    .text.Error_Handler:0000000000000000 $t
/var/folders/br/2wtqgb695v5djmfg7vx_4m7h0000gn/T//cc55g6pM.s:451    .text.Error_Handler:0000000000000000 Error_Handler
/var/folders/br/2wtqgb695v5djmfg7vx_4m7h0000gn/T//cc55g6pM.s:507    .bss.loaded:0000000000000000 loaded
                            *COM*:000000000000000a a_str
/var/folders/br/2wtqgb695v5djmfg7vx_4m7h0000gn/T//cc55g6pM.s:500    .bss.a:0000000000000000 a
/var/folders/br/2wtqgb695v5djmfg7vx_4m7h0000gn/T//cc55g6pM.s:488    .data.endline:0000000000000000 endline
/var/folders/br/2wtqgb695v5djmfg7vx_4m7h0000gn/T//cc55g6pM.s:482    .data.cmdOff:0000000000000000 cmdOff
/var/folders/br/2wtqgb695v5djmfg7vx_4m7h0000gn/T//cc55g6pM.s:475    .data.cmdOn:0000000000000000 cmdOn
/var/folders/br/2wtqgb695v5djmfg7vx_4m7h0000gn/T//cc55g6pM.s:495    .data.tData:0000000000000000 tData
/var/folders/br/2wtqgb695v5djmfg7vx_4m7h0000gn/T//cc55g6pM.s:471    .data.cmdOn:0000000000000000 $d
/var/folders/br/2wtqgb695v5djmfg7vx_4m7h0000gn/T//cc55g6pM.s:478    .data.cmdOff:0000000000000000 $d
/var/folders/br/2wtqgb695v5djmfg7vx_4m7h0000gn/T//cc55g6pM.s:485    .data.endline:0000000000000000 $d
/var/folders/br/2wtqgb695v5djmfg7vx_4m7h0000gn/T//cc55g6pM.s:491    .data.tData:0000000000000000 $d
/var/folders/br/2wtqgb695v5djmfg7vx_4m7h0000gn/T//cc55g6pM.s:501    .bss.a:0000000000000000 $d
/var/folders/br/2wtqgb695v5djmfg7vx_4m7h0000gn/T//cc55g6pM.s:503    .bss.loaded:0000000000000000 $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
HAL_GPIO_WritePin
HAL_UART_Transmit
HAL_UART_GetState
huart1
HAL_GPIO_ReadPin
memset
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_Init
MX_GPIO_Init
MX_USART1_UART_Init
HAL_UART_Receive
HAL_Delay
